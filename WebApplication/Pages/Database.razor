@page "/database"
@using WebApplication.DataAccess

<h1>Database Management</h1>

<button class="btn" @onclick="SetAddActive">Show Add</button>
<button class="btn" @onclick="SetEditActive">Show Edit</button>
<button class="btn" @onclick="SetRemoveActive">Show Remove</button>

@switch (CurrentComponentActive)
{
    case ComponentActive.Add:
    {
        <p>Add course to database</p>
        
        <p>
            Course Id: <input @bind="courseId" />
        </p>
        
        <p>
            Course Name: <input @bind="courseName" />
        </p>
        
        <p>
            Course Semester: <input @bind="courseSemester" />
        </p>
        
        <p>
            Course Is Elective:
            <InputRadioGroup>
                
            </InputRadioGroup>
        </p>

        <ul>
            <li><code>inputValue</code>: @courseId</li>
            <li><code>InputValue</code>: @courseName</li>
            <li><code>inputValue</code>: @courseSemester</li>
            <li><code>InputValue</code>: @courseIsElective</li>
        </ul>
        
        break;
    }
    case ComponentActive.Edit:
    {
        <p>Edit component is active</p>
        break;
    }
    case ComponentActive.Remove:
    {
        <p>Remove component is active</p>
        break;
    } 
    default: break;

}

@code
{
    public ComponentActive CurrentComponentActive { get; set; }
    
    private int courseId { get; set; }
    private string courseName { get; set; }
    private int courseSemester { get; set; }
    private bool courseIsElective { get; set; }
    

    public void SetAddActive(MouseEventArgs e)
    {
        CurrentComponentActive = ComponentActive.Add;
    }
    
    public void SetEditActive(MouseEventArgs e)
    {
        CurrentComponentActive = ComponentActive.Edit;
    }
    
    public void SetRemoveActive(MouseEventArgs e)
    {
        CurrentComponentActive = ComponentActive.Remove;
    }
    
    

    protected override async Task OnInitializedAsync()
    {
        InsertCourse();
        InsertProgramme();
    }

    private async Task InsertCourse()
    {
        Course dnp1 = new Course
        {
            Id = "DNP1",
            Name = "Internet Technologies, C# and .NET",
            Semester = 3,
            IsElective = false,
        };

        using ViaDBContext dbContext = new ViaDBContext();

        await dbContext.Courses.AddAsync(dnp1);
        await dbContext.SaveChangesAsync();

    }

    private async Task InsertProgramme()
    {
        Course SDJ2 = new Course
        {
            Id = "SDJ2",
            Name = "Software Development with Java and UML 2",
            Semester = 2,
            IsElective = false
        };
        Course GMD = new Course
        {
            Id = "GMD1",
            Name = "Game Development",
            Semester = 6,
            IsElective = true
        };

        List<Course> courses = new List<Course> {GMD, SDJ2};
        Programme software = new Programme
        {
            Location = "Horsens",
            Name = "Software Technology Engineering",
            ShortName = "Software",
            HeadOfDepartment = "AHM",
            Courses = courses
        };

        using (ViaDBContext dbContext = new ViaDBContext())
        {
            await dbContext.Programmes.AddAsync(software);
            await dbContext.SaveChangesAsync();
        }
    }
}
